/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package clinica;

import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.xmldb.api.base.*;
import org.xmldb.api.base.Collection;
import org.xmldb.api.DatabaseManager;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.xmldb.api.modules.XMLResource;
import org.xmldb.api.modules.XPathQueryService;

/**
 *
 * @author diego
 */
public class Clinica extends javax.swing.JFrame {

    /**
     * Creates new form Clinica
     */
    public static Collection col = null;

    public Clinica() {
        try {
            initComponents();
            jTableDatosCliente.setVisible(false);
            final String driver = "org.exist.xmldb.DatabaseImpl";
            // initialize database driver
            Class cl = Class.forName(driver);
            Database database = (Database) cl.getDeclaredConstructor().newInstance();
            database.setProperty("create-database", "true");
            DatabaseManager.registerDatabase(database);

            // Conectarnos a una coleccion
            col = DatabaseManager.getCollection("xmldb:exist://localhost:8080/exist/xmlrpc/db/clinica",
                    "admin", "diego");
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(Clinica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SecurityException ex) {
            Logger.getLogger(Clinica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Clinica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Clinica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Clinica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(Clinica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(Clinica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (XMLDBException ex) {
            Logger.getLogger(Clinica.class.getName()).log(Level.SEVERE, null, ex);
        }
    }       

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonCargarClientes = new javax.swing.JButton();
        jSeparatorClientes = new javax.swing.JSeparator();
        jLabelPoblaciones = new javax.swing.JLabel();
        jComboBoxPoblacion = new javax.swing.JComboBox<>();
        jSeparatorTabla = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableDatosCliente = new javax.swing.JTable();
        jLabelNumero = new javax.swing.JLabel();
        jTextFieldNumero = new javax.swing.JTextField();
        jLabelNombre = new javax.swing.JLabel();
        jTextFieldNombre = new javax.swing.JTextField();
        jLabelPoblacion = new javax.swing.JLabel();
        jTextFieldPoblacion = new javax.swing.JTextField();
        jLabelTlf = new javax.swing.JLabel();
        jTextFieldTlf = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldDireccion = new javax.swing.JTextField();
        jButtonGuardar = new javax.swing.JButton();
        jButtonSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonCargarClientes.setBackground(new java.awt.Color(102, 204, 255));
        jButtonCargarClientes.setText("CARGAR CLIENTES");
        jButtonCargarClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCargarClientesActionPerformed(evt);
            }
        });

        jLabelPoblaciones.setText("Poblaciones:");

        jComboBoxPoblacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPoblacionActionPerformed(evt);
            }
        });

        jTableDatosCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTableDatosCliente.setEnabled(false);
        jTableDatosCliente.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableDatosCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableDatosClienteMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableDatosCliente);

        jLabelNumero.setText("Numero: ");

        jTextFieldNumero.setEditable(false);

        jLabelNombre.setText("Nombre: ");

        jLabelPoblacion.setText("Poblacion: ");

        jLabelTlf.setText("Telefono:");

        jLabel1.setText("Direccion: ");

        jButtonGuardar.setBackground(new java.awt.Color(153, 255, 153));
        jButtonGuardar.setText("GUARDAR");
        jButtonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarActionPerformed(evt);
            }
        });

        jButtonSalir.setBackground(new java.awt.Color(255, 51, 51));
        jButtonSalir.setText("SALIR");
        jButtonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jButtonCargarClientes))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabelPoblaciones, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jComboBoxPoblacion, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addGap(0, 28, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparatorClientes)
                            .addComponent(jSeparatorTabla)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonSalir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonGuardar, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(96, 96, 96))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabelNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabelNumero, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldNumero, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabelTlf, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabelPoblacion)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextFieldDireccion, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextFieldPoblacion, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextFieldTlf, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jButtonCargarClientes)
                .addGap(18, 18, 18)
                .addComponent(jSeparatorClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPoblaciones)
                    .addComponent(jComboBoxPoblacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparatorTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNumero)
                    .addComponent(jTextFieldNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNombre)
                    .addComponent(jTextFieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonGuardar))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPoblacion)
                    .addComponent(jTextFieldPoblacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelTlf)
                    .addComponent(jTextFieldTlf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSalir))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalirActionPerformed

        int confirm = JOptionPane.showConfirmDialog(null, "¿Seguro que desea salir?",
                "Confirmar salida", JOptionPane.YES_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                System.exit(0);
                col.close();
                System.out.println("El programa se ha cerrado");
            } catch (XMLDBException ex) {
                Logger.getLogger(Clinica.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtonSalirActionPerformed

    private void jButtonCargarClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCargarClientesActionPerformed
        obtenerClientes();
        JOptionPane.showMessageDialog(null, "Clientes cargados desde la base de datos correctamente");
        System.out.println("Clientes cargados desde la base de datos correctamente");
    }//GEN-LAST:event_jButtonCargarClientesActionPerformed


    private void jComboBoxPoblacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPoblacionActionPerformed

        try {
            XMLResource doc = (XMLResource) col.getResource("clientes.xml");
            //Si el documento no existe
            if (doc == null) {
                JOptionPane.showMessageDialog(null, "El documento no existe en la base de datos");
                System.out.println("El documento no existe en la base de datos");
            } else {
                String itemSelect = (String) jComboBoxPoblacion.getSelectedItem();
                String consulta = "for $cliente in doc(\"clientes.xml\")//clien\n"
                        + "where $cliente/poblacion =\"" + itemSelect + "\"\n"
                        + "return concat($cliente/nombre/text(), \",\", $cliente/tlf/text())";
                //Solicitamos el servicio para consulta
                XPathQueryService servicio = (XPathQueryService) col.getService("XPathQueryService", "1.0");
                // Ejecutamos la consulta
                ResourceSet resultado = servicio.query(consulta);
                //Definimos el modelo de la tabla
                DefaultTableModel modelo = new DefaultTableModel();
                modelo.addColumn("Nombre");
                modelo.addColumn("Telefono");
                //Iteramos los resultados
                ResourceIterator i = resultado.getIterator();
                while (i.hasMoreResources()) {
                    Resource r = i.nextResource();
                    //Obtememos los datos del cliente
                    String[] cliente = ((String) r.getContent()).split(",");
                    modelo.addRow(cliente);
                }
                jTableDatosCliente.setModel(modelo);
                jTableDatosCliente.setVisible(true);
                jTableDatosCliente.getTableHeader().setVisible(true);
                jTableDatosCliente.setEnabled(true);
            }
        } catch (XMLDBException ex) {
            Logger.getLogger(Clinica.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jComboBoxPoblacionActionPerformed

    private void jTableDatosClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableDatosClienteMouseClicked
        //Guardamos en un entero la fila seleccionada.
        int indice = jTableDatosCliente.getSelectedRow();
        System.out.println(indice);;
        try {
            // Si no hemos pulsado ninguna fila...
            if (indice == -1) {
                JOptionPane.showMessageDialog(null, "No ha seleccionado ninguna fila.");
            } else {
                Object filaSelect = jTableDatosCliente.getValueAt(indice, 0);
                System.out.println(filaSelect);
                XPathQueryService queryService = (XPathQueryService) col.getService("XPathQueryService", "1.0");

                String query = "for $cliente in collection(\"clinica\")//clien\n"
                        + "where $cliente/nombre=\"" + filaSelect + "\"\n"
                        + "return $cliente"; // Teléfono a buscar
                ResourceSet result = queryService.query(query);

                if (result.getSize() > 0) {
                    ResourceIterator iterator = result.getIterator();
                    while (iterator.hasMoreResources()) {
                        Resource resource = iterator.nextResource();
                        String buscarPoblacion = "for $cliente in collection(\"clinica\")//clien\n"
                                + "where $cliente/nombre=\"" + filaSelect + "\"\n"
                                + "return string($cliente/poblacion)";
                        ResourceSet poblacion = queryService.query(buscarPoblacion);
                        jTextFieldPoblacion.setText(poblacion.getIterator().nextResource().getContent().toString());
                        String buscarNombre = "for $cliente in collection(\"clinica\")//clien\n"
                                + "where $cliente/nombre=\"" + filaSelect + "\"\n"
                                + "return string($cliente/nombre)";
                        ResourceSet nombre = queryService.query(buscarNombre);
                        jTextFieldNombre.setText(nombre.getIterator().nextResource().getContent().toString());
                        String buscarTelefono = "for $cliente in collection(\"clinica\")//clien\n"
                                + "where $cliente/nombre=\"" + filaSelect + "\"\n"
                                + "return string($cliente/tlf)";
                        ResourceSet telefono = queryService.query(buscarTelefono);
                        jTextFieldTlf.setText(telefono.getIterator().nextResource().getContent().toString());
                        String buscarDireccion = "for $cliente in collection(\"clinica\")//clien\n"
                                + "where $cliente/nombre=\"" + filaSelect + "\"\n"
                                + "return string($cliente/direccion)";
                        ResourceSet direccion = queryService.query(buscarDireccion);
                        jTextFieldDireccion.setText(direccion.getIterator().nextResource().getContent().toString());
                        String buscarNumero = "for $cliente in collection(\"clinica\")//clien\n"
                                + "where $cliente/nombre=\"" + filaSelect + "\"\n"
                                + "return string($cliente/@numero)";
                        ResourceSet numero = queryService.query(buscarNumero);
                        jTextFieldNumero.setText(numero.getIterator().nextResource().getContent().toString());
                    }
                } else {
                    System.out.println("Cliente no encontrado.");
                }

            }
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex + "\nInténtelo nuevamente", " .::Error En la Operacion::.", JOptionPane.ERROR_MESSAGE);
        } catch (XMLDBException ex) {
            Logger.getLogger(Clinica.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jTableDatosClienteMouseClicked

    private void jButtonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarActionPerformed
        try {

            XPathQueryService servicio = (XPathQueryService) col.getService("XPathQueryService", "1.0");
            String modificar = "update replace //clien[@numero=\"" + jTextFieldNumero.getText() + "\"]with <clien numero=\"" 
                    + jTextFieldNumero.getText() + "\">"
                    + "<nombre>" + jTextFieldNombre.getText() + "</nombre>"
                    + "<poblacion>" + jTextFieldPoblacion.getText() + "</poblacion>"
                    + "<tlf>" + jTextFieldTlf.getText() + "</tlf>"
                    + "<direccion>" + jTextFieldDireccion.getText() + "</direccion></clien>";
            ResourceSet actualizarDatos = servicio.query(modificar);
            JOptionPane.showMessageDialog(null, "Cliente modificado correctamente");
        } catch (XMLDBException ex) {
            Logger.getLogger(Clinica.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonGuardarActionPerformed

    public static String read(String file) throws IOException {
        StringBuilder content = new StringBuilder();
        try ( BufferedReader reader = Files.newBufferedReader(Paths.get(file), Charset.defaultCharset())) {
            String line = null;
            while ((line = reader.readLine()) != null) {
                content.append(line).append("\n");
            }
            return content.toString();
        }
    }

    public void obtenerClientes() {
        try {
            XPathQueryService servicio = (XPathQueryService) col.getService("XPathQueryService", "1.0");
            //Ejecutamos la consulta
            String archivo = "src/script/script.xq";
            String consulta = read(archivo);
            System.out.println("Consulta leida del script " + consulta);
            ResourceSet r = servicio.query(consulta);
            ResourceIterator nodos = r.getIterator();
            while (nodos.hasMoreResources()) {
                Resource nodo = nodos.nextResource();
                String poblacion = (String) nodo.getContent();
                System.out.println(nodo.getContent());
                jComboBoxPoblacion.addItem(poblacion);
            }
        } catch (XMLDBException e) {
            // TODO Auto-generated catch block 
            e.printStackTrace();
        } catch (IOException ex) {
            Logger.getLogger(Clinica.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Clinica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Clinica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Clinica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Clinica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Clinica().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCargarClientes;
    private javax.swing.JButton jButtonGuardar;
    private javax.swing.JButton jButtonSalir;
    private javax.swing.JComboBox<String> jComboBoxPoblacion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelNombre;
    private javax.swing.JLabel jLabelNumero;
    private javax.swing.JLabel jLabelPoblacion;
    private javax.swing.JLabel jLabelPoblaciones;
    private javax.swing.JLabel jLabelTlf;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparatorClientes;
    private javax.swing.JSeparator jSeparatorTabla;
    private javax.swing.JTable jTableDatosCliente;
    private javax.swing.JTextField jTextFieldDireccion;
    private javax.swing.JTextField jTextFieldNombre;
    private javax.swing.JTextField jTextFieldNumero;
    private javax.swing.JTextField jTextFieldPoblacion;
    private javax.swing.JTextField jTextFieldTlf;
    // End of variables declaration//GEN-END:variables
}
